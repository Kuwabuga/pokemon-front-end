name: Deploy Application

on: workflow_dispatch

env:
  INFRASTRUCTURE_DIRECTORY: "./infrastructure"
  APPLICATION_DIRECTORY: "./application"

jobs:
  audit-and-linting:
    name: Run audit and linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install dependencies
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: npm install

      # TODO
      # - name: Run Audit
      #   working-directory: ${{ env.APPLICATION_DIRECTORY }}
      #   run: npm audit fix

      # - name: Run Lint
      #   working-directory: ${{ env.APPLICATION_DIRECTORY }}
      #   run: npm run lint

  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install dependencies
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: npm install

      # TODO
      # - name: Run unit tests
      #   working-directory: ${{ env.APPLICATION_DIRECTORY }}
      #   run: npm run test:unit

  e2e-tests:
    name: Run e2e tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install dependencies
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: npm install

      # TODO
      # - name: Run e2e tests
      #   working-directory: ${{ env.APPLICATION_DIRECTORY }}
      #   run: npm run test:e2e

  set-environment:
    name: Set environment variables
    needs: [audit-and-linting,unit-tests,e2e-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set environment based on branch
        run: |
          case ${GITHUB_REF##*/} in
            "production") echo "ENVIRONMENT=production" >> $GITHUB_ENV ;;
            "preprod") echo "ENVIRONMENT=preprod" >> $GITHUB_ENV ;;
            "qa") echo "ENVIRONMENT=qa" >> $GITHUB_ENV ;;
            *) echo "ENVIRONMENT=development" >> $GITHUB_ENV ;;
          esac

      - name: Set subdomain and domain
        working-directory: ${{ env.INFRASTRUCTURE_DIRECTORY }}
        run: |
          echo "SUBDOMAIN=$(cat domains.json | jq -r ".$ENVIRONMENT.subdomain")" >> $GITHUB_ENV
          echo "DOMAIN=$(cat domains.json | jq -r ".$ENVIRONMENT.domain")" >> $GITHUB_ENV

    outputs:
      ENVIRONMENT: ${{ env.ENVIRONMENT }}
      SUBDOMAIN: ${{ env.SUBDOMAIN }}
      DOMAIN: ${{ env.DOMAIN }}

  deploy-website:
    name: Deploy Website
    needs: [set-environment]
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ needs.set-environment.outputs.ENVIRONMENT }}
      SUBDOMAIN: ${{ needs.set-environment.outputs.SUBDOMAIN }}
      DOMAIN: ${{ needs.set-environment.outputs.DOMAIN }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install application's dependencies
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: npm install

      - name: Build
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{ secrets.AWS_REGION }}

      - name: Sync S3 webite bucket
        working-directory: ${{ env.INFRASTRUCTURE_DIRECTORY }}
        env:
          BUILD_PATH: application/dist
        run: aws s3 sync "../$BUILD_PATH" "s3://$SUBDOMAIN.$DOMAIN" --cache-control "no-cache" --delete

  invalidate-cache:
    name: Invalidate Cloudfront cache
    needs: [set-environment, deploy-website]
    if: ${{ needs.set-environment.outputs.ENVIRONMENT }} == "production"
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ needs.set-environment.outputs.ENVIRONMENT }}
      SUBDOMAIN: ${{ needs.set-environment.outputs.SUBDOMAIN }}
      DOMAIN: ${{ needs.set-environment.outputs.DOMAIN }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{ secrets.AWS_REGION }}

      - name: Invalidate Cloudfront cache
        working-directory: ${{ env.INFRASTRUCTURE_DIRECTORY }}
        run: |
          DISTRIBUTION=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[?Id == '$SUBDOMAIN.$DOMAIN']] | [0].Id" | sed 's/"//g')
          INVALIDATION=$(aws cloudfront create-invalidation --distribution-id $DISTRIBUTION --paths /* --query "Invalidation.Id" | sed 's/"//g')
          aws cloudfront wait invalidation-completed --distribution-id $DISTRIBUTION --id $INVALIDATION